COMPLETE CONTEXT: ADMIN HOMEPAGE SECTIONS PRODUCT MANAGEMENT

CURRENT ISSUE:
- Delete products from sections: NOT WORKING
- Search products: NOT WORKING 
- Add products to sections: NOT WORKING

BACKEND API ENDPOINTS:

1. Add Product to Section
POST /api/v1/admin/homepage-sections/{sectionId}/products
Content-Type: application/json
Body: { "productId": "product_id_here" }

2. Remove Product from Section
DELETE /api/v1/admin/homepage-sections/{sectionId}/products/{productId}

3. Get All Admin Sections (with products)
GET /api/v1/admin/homepage-sections

4. Get Public Sections (for homepage)
GET /api/v1/homepage-sections

BACKEND CONTROLLERS & ROUTES:

File: server/controllers/homepageSectionController.js
- addProductToSection() - Adds product to section
- removeProductFromSection() - Removes product from section
- getAllHomepageSections() - Gets all sections for admin
- getHomepageSections() - Gets visible sections for public

File: server/routes/adminHomepageSectionRoutes.js
- POST /:id/products - Add product
- DELETE /:id/products/:productId - Remove product
- GET / - Get all sections

FRONTEND REDUX ACTIONS:

File: client/src/features/homepageSections/homepageSectionSlice.js

Current Implementation (Using Direct Fetch):

// Add Product
export const addProductToSection = createAsyncThunk(
  'homepageSections/addProductToSection',
  async ({ sectionId, productId }, { rejectWithValue }) => {
    try {
      const response = await fetch(`http://localhost:3001/api/v1/admin/homepage-sections/${sectionId}/products`, {
        method: 'POST',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId })
      })
      const data = await response.json()
      return data.data || data
    } catch (error) {
      return rejectWithValue(error.message || 'Failed to add product to section')
    }
  }
)

// Remove Product
export const removeProductFromSection = createAsyncThunk(
  'homepageSections/removeProductFromSection',
  async ({ sectionId, productId }, { rejectWithValue }) => {
    try {
      const response = await fetch(`http://localhost:3001/api/v1/admin/homepage-sections/${sectionId}/products/${productId}`, {
        method: 'DELETE',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' }
      })
      const data = await response.json()
      return data.data || data
    } catch (error) {
      return rejectWithValue(error.message || 'Failed to remove product from section')
    }
  }
)

FRONTEND UI COMPONENTS:

File: client/src/components/admin/HomepageSectionManager.jsx

Product Manager Modal:
const ProductManager = ({ section, products, onAddProduct, onRemoveProduct, onClose }) => {
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('')

  // Filter available products
  const sectionProductIds = section.products?.map(p => p._id) || []
  const availableProducts = products.filter(product => 
    !sectionProductIds.includes(product._id) &&
    product.name.toLowerCase().includes(searchTerm.toLowerCase()) &&
    (selectedCategory === '' || product.category === selectedCategory)
  )

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      {/* Search Input */}
      <input
        type="text"
        placeholder="Search products..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />
      
      {/* Current Products - Remove Button */}
      {section.products?.map((product) => (
        <button onClick={() => onRemoveProduct(section._id, product._id)}>
          <X className="w-4 h-4" />
        </button>
      ))}
      
      {/* Available Products - Add Button */}
      {availableProducts.map((product) => (
        <button onClick={() => onAddProduct(section._id, product._id)}>
          <Plus className="w-4 h-4" />
        </button>
      ))}
    </div>
  )
}

Handler Functions:
const handleAddProduct = (sectionId, productId) => {
  console.log('Adding product to section:', { sectionId, productId })
  dispatch(addProductToSection({ sectionId, productId }))
}

const handleRemoveProduct = (sectionId, productId) => {
  console.log('Removing product from section:', { sectionId, productId })
  dispatch(removeProductFromSection({ sectionId, productId }))
}

REDUX STATE MANAGEMENT:

File: client/src/features/homepageSections/homepageSectionSlice.js

State Structure:
const initialState = {
  sections: [],           // Public sections
  adminSections: [],      // Admin sections with full data
  isLoading: false,
  adminLoading: false,
  error: null,
  adminError: null
}

Reducers:
// Add product to section
.addCase(addProductToSection.fulfilled, (state, action) => {
  const index = state.adminSections.findIndex(section => section._id === action.payload._id)
  if (index !== -1) {
    state.adminSections[index] = action.payload
  }
})

// Remove product from section  
.addCase(removeProductFromSection.fulfilled, (state, action) => {
  const index = state.adminSections.findIndex(section => section._id === action.payload._id)
  if (index !== -1) {
    state.adminSections[index] = action.payload
  }
})

CURRENT DEBUG FEATURES:

1. Console Logging:
   - API call logs with request/response
   - Redux state update logs
   - Product filtering debug info

2. Test Buttons:
   - "Test Add" - Adds first available product
   - "Test Remove" - Removes first section product

3. Debug Info:
   - Total products count
   - Available products count
   - Search term and category filter
   - All product names

CURRENT STATUS:

‚úÖ Backend APIs: Working (tested with curl)
‚úÖ Redux Actions: Updated to use direct fetch
‚úÖ UI Components: Properly structured
‚ùå Delete Function: Not working in UI
‚ùå Search Function: Not working in UI  
‚ùå Add Function: Not working in UI

EXPECTED FLOW:

1. User clicks üì¶ icon ‚Üí Opens ProductManager modal
2. User types in search ‚Üí Filters availableProducts array
3. User clicks + button ‚Üí Calls handleAddProduct ‚Üí Dispatches addProductToSection
4. User clicks X button ‚Üí Calls handleRemoveProduct ‚Üí Dispatches removeProductFromSection
5. Redux updates state ‚Üí UI re-renders with new data

POTENTIAL ISSUES:

1. Authentication: Cookies not being sent properly
2. CORS: Cross-origin issues
3. Redux State: State not updating correctly
4. UI Rendering: Components not re-rendering
5. Data Structure: Mismatch between API response and expected format

TECHNICAL STACK:
- Frontend: React 18, Redux Toolkit, Axios (replaced with fetch)
- Backend: Node.js, Express, MongoDB, Mongoose
- Authentication: JWT with httpOnly cookies
- API Base URL: http://localhost:3001/api/v1

FILES INVOLVED:
- client/src/components/admin/HomepageSectionManager.jsx
- client/src/features/homepageSections/homepageSectionSlice.js
- server/controllers/homepageSectionController.js
- server/routes/adminHomepageSectionRoutes.js
- server/models/HomepageSection.js

TESTING COMMANDS:
curl -X POST http://localhost:3001/api/v1/admin/homepage-sections/{sectionId}/products -H "Content-Type: application/json" -b cookies.txt -d '{"productId": "product_id"}'
curl -X DELETE http://localhost:3001/api/v1/admin/homepage-sections/{sectionId}/products/{productId} -H "Content-Type: application/json" -b cookies.txt





