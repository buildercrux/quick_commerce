version: '3.8'

services:
  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ecom-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - client_build:/usr/share/nginx/html:ro
    depends_on:
      - server
    networks:
      - ecom-network

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: ecom-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ecom-multirole
    volumes:
      - mongodb_data:/data/db
    networks:
      - ecom-network

  # Redis for caching
  redis:
    image: redis:7.2-alpine
    container_name: ecom-redis-prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - ecom-network

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: ecom-server-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=${MONGODB_URI_PROD}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    depends_on:
      - mongodb
      - redis
    networks:
      - ecom-network

  # Frontend Build
  client-build:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    container_name: ecom-client-build
    volumes:
      - client_build:/app/dist
    networks:
      - ecom-network

volumes:
  mongodb_data:
  redis_data:
  client_build:

networks:
  ecom-network:
    driver: bridge


